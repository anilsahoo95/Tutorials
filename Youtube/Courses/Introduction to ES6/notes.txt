let var1="hello"
let var2="world"
earler to concantenate we used var1+" "+var2

now we can use template literals
above can be accomplished using:-
`${var1} ${var2}`

create multiline strings 
earlier "hello /n" + "world"

now `${var1}
${var2}
`

Destructuring objects:-
A new way to get hold of properties of an 
object

let obj={
firstName:"anil",
lastname:"sahoo",
city:"bbsr",
state:"orissa"
}

earlier to access a property we had to do
obj.firstName,obj.lastname etc;

with object destructuring we can do
const {firstname,lastname}=obj;
console.log(`${firstname} ${lastname}`)

if we want to use a diffrent variable name
other than the property f d object we could
use:-
const {firstname:fn,lastname:ln}=obj
console.log(`${fn} ${ln}`)

destructuring arrys:-
const [firstname,lastname,city]=["anil","saho"
,"bbsr"]
console.log(firstname);

object literals:-
look at an example
addrMaker(city,state)
{
const newaddress={city:city,state:state)
return newaddress
}

with object literals if the argument name
is same as object property name then u dont
need to specify the value in object

const newaddress={city,state} will work only
if the name is same

for of loop:-
let incomes=[300,400,500]
let total=0;

for (let income of incomes)
{
total+=income;
}
console.log(total);

u can use for of loop on any iterables.. it
could be arrys or string

u cannot update the value of arrays using
for of loop

spread operator- used to attach a value of
a variable like array as a part of another
variable

var ex1=[1,2,3,4,5]
var ex2=[...ex1]
ex2.push(true)

var ex1={firstname:"anil","lastname":{sahoo"}
var ex2={...ex1}

when ur writing a function and u r nt sure 
hw many argumets could be passed on to this 
function and u also dont want to use an array
as an argument u can make use of rest operator
(...) in argument part

add(...nums)
{
console.log(nums)
}
add(1,2,3,4)

this will convert the arguments into an array
n provide us so we could use it

arrow functions are shorthand representation
of functions
function is replaced by =>

deafult params:
prevent a lot of app crashing due to errors
function add(arrList)
{
total=0;
arrList.forEach((data)=>
{
total=total+data;
}
add();
this would result in an error as add we are 
not providing any argumets
to handle this we can provide a default value
to the argument in case an argument is not
provided it will take up default value n
nt crash
function add(numList=[])

includes method is if something exists in
an array or not
arr=[1,2,3,4]
console.log(arr.includes(1)); woud return tru

let has block scope whereas var has not

const doesnt allow to modify primitive data
type values and datatypes
but objects n arrays can be modified even wi
th const but cant be assigned to something
new
ex- const arr=[5];
arr.push(6) -- will work
arr=[2,3,4] will not work

import/export:-
examples.js
export const data=[1,2,3];
export const data1=[2,3,4];

index.js:-
import { data, data1 } from './examples.js'

a file may contain several exports.. u can import
them individually lyk u did above or import them
all by using
import * as lib from './exmaples.js'
then to use a particular data/method u have to
do lib.add etc

give alias while importing
import {data as d} from './exmaples.js'

if u want to export only 1 thing from a file
u could use export default..(filr should hv nly
1 export)

export default function(){}

import name from './' (no need of any {} as only
one can be imported

every file in nodejs is itself a module

require is used to import a module/file into a
current file

add.js
function add(a,b)
{
return a+b;
}
add(5,6)

first.js
require('./add.js');
 node first.js will run the module imported
require will execute whatever is present in the 
module

if we want a variable/function to be accessible
in another file we have to export it

anything u want to export u have define it using
module.exports=

now require('') will return whatever u have given
the value in module.exports
so for 
first.js
function add(a,b)
{
return a+b;
}
module.exports=add;

second.js
var addfn=require('./first.js').. here require
will return the add function and will get assigned
to addfn which can be used in thr file as addfn(1
,2)

u can also export functions as an object
first.js
function add()
{
return a+b;
}
function subtract(a,b)
{
return a-b;
}
module.exports={
add:add,
substract:subtract}
 
var object1=require('./first.js)--- here require
will return an object which will get assigned
to object1 n nw to use a function u could use
object1.add(1,2)

u can also export using:-
module.exports.add=add;
module.exports.subtract=subtract;



Classes:-
in animal.js
export class Animal
{
var type;
var legs;
constructor(type,legs){
this.type=type;
this.legs=legs;
}

}

in index.js
import { Animal } from './animal'

let cat=new Animal('dog',4)
console.log(cat.type)

if u make a method static u can call the meth
od without creating an instance

class Cat extends Animal

fetch:-
const api="url";
fetch(api).then((r)=>r.json()).then((json)=>
{  }).catch((err))

A set is a datastructure like array but 
contains only unique values..
let a=new Set([1,2,1,1]);
all the duplicate values will be ignored