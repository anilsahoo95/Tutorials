kubernetes is a popular container orchestration technology

Containers:-
Docker is a container technology.
Why containers:-
Software to be used may not be compatible to the os being used
Long setup time for new developers
each software would run a differnt container
OS is a combination of OS kernel and Software..
docker is used to containerize applications and ship them and run them.
Most projects push the docker containers to docker registries so that u can pull n run those apps
Docker image is a set of packages that contain an app/software
Container is an instance of a docker image

Orchestration:-
some problems:-
how will u manage if ur app container depends on other container like database
Automation of deploying and managing containers is called container orchestration

Docker swarm is easy to setup but lacks a lot of advanced features
 scale up when no of user increses and scale down when no of users decrease

minikube start to start kubernetes on ur local windows

Kubernetes Architecture:-
a node is physical/ virtual machine where app runs. also called minion

a cluster is a group of nodes.if one node goes down other nodes will still work.. work/users is distributed betwwem various nodes

master node is the node used to manage cluster
 Kubernetes consists of various components:-
kube api server is the one that interacts with the user
etcd stores data about the various servers/nodes in key value pair
controller
scheduler
kubelet is installed on all the worker nodes that carry out tasks mentioned by kube api serverv which is present in master
container runtime is a software that would run the app container.. like docker,cryo,rkt

kubectl is a command line tool used to run and mange a cluster
kubectl run hello-minikube

kubectl cluster-info

kubectl get nodes

minikube comes with all the above components bundled together
pod is the smallest unit that can be created in kubernetes..it contains containers

now suppose u create a docker image n run it.. whenthe num of users increase u 
run another container
pod is a single container that is deployed.. 
it may contain one or more contaimers within it if one container has a 
dependency on another

run pods:-
kubectl run nginx --image=nginx
first nginx(pod name)
--image is used to mention the image name to be pulled from docker hub

kubectl get pods-- to get a list of pods available in cluster

kubectl describe pod podname

create a pod using yaml

kubernetes uses yaml files to get configurations for pods,services,deployments

Each kubernetes yaml file must have the following properties:

apiVersion: v1 for pod/service, apps/v1 for deployment/replicaset
kind: pod/serveice/deployment/replicaset
metadata:
spec:

ex- metadata:
       name:
       labels: 
           app: myapp
   spec:
     containers:
         -name: 
          image: 

to create a pod using the above yaml file
kubectl create -f yaml_file_name

Controllers are the brain of controllers.. they view the manage of pods and react accordingly

ReplicationController is a type of controller 
if a pod fails it brings up another pod
creates replica pods when load on one pod increases

Yaml file for replica controller
apiVersion: v1
kind: ReplicationController
metadata:

spec:
   template: 
     metadata:
       name:
       labels: 
           app: myapp
   spec:
     containers:
         -name: 
          image:
replicas: 3

template contains details of the pod which needs to be replicated

ReplicaSets:- does work similar to ReplicationController
apiVersion: apps/v1
kind: ReplicaSet
metadata:
spec:
  selector:
   matchLabels:
       type: my-app (manage existing pods)

update to a existing yaml config file
kubectl replace -f yaml_file_name

Services allow connection between pods.. it allows connection between frontend,backend and database
Service allows access to a pod present in one ntework to the outside network
Nodeport is a service which makes internal pod accessible in a port of the node



Replicasets is used to also monitor existing pods for that we use selector in yaml file

delete a pod:- kubectl delete pod podname

after defining number of replicas for a pod if u delete a pod, 
kubernetes will create a pod itself to make sure number of replicas is 
always same

labels are very important as they are used to identify pods individually

pod is a objevt that gets a container running
replicaset is an object that creates and manager running of pods
deployment is an object that deals with creation and management of replica sets

yaml for deployment is similar to replicasets only kind would be Deployment

if u want to update deployment file:
kubectl apply

Types of deployment strategies:
1.recreate
2.rolling update

In kubernetes an ip address is assigned to a pod

create a service--
apiVersion: v1
kind: service
metadata:
    name:
spec:
    type: NodePort
    ports:
      - targetPort: 80
        port: 80
        nodePort: 30008
    selector:
        type: 

Types of service
1.nodeport
2.clusterip
3.load balancer

services are the ones that allow a kubernetes pod to be accessible to outsyd world

kubectl get pods-- to get list of existing pods

kubectl get services-- to get list of current services

to expose a kubernetes application to the outside world u have to expose the pod using loadbalancer
service type.. n u will be assigned an external ip.. in case of minikube which is just meant for
learning purpose u have to run command minikube tunnel in another terminal for external ip to
get configured

kubectl expose pod/nginxpod --type="LoadBalancer" --port 8094 --target-port=80 --name nginxpod2

here  nginxpod is the name of the pod that is already running

to delete a service u can use:-
kubectl delete pod podname
kubectl delete service servicename


